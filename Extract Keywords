def extract_keywords_percentages(observation, dataset, predicted_label, other_label):
    
    lemmatized_observation = clean_text(observation)

    kw_extractor = yake.KeywordExtractor()
    language = "en"
    max_ngram_size = 3
    deduplication_threshold = 0.8
    numOfKeywords = 10
    custom_kw_extractor = yake.KeywordExtractor(lan=language, n=max_ngram_size, dedupLim=deduplication_threshold, top=numOfKeywords, features=None)
    keywords = custom_kw_extractor.extract_keywords(lemmatized_observation)
    
    keywords_perc = {}
    other_keywords_perc = {}

    for keyword, _ in keywords:
        # Filter dataset to include only observations containing the keyword
        keyword_obs_df = dataset[dataset['Observation'].str.contains(keyword, case=False, na=False)]
        
        # Total number of observations containing the keyword
        total_keyword_obs = keyword_obs_df.shape[0]
        
        # Number of observations containing the keyword and having the predicted label
        label_keyword_obs = keyword_obs_df[keyword_obs_df['sentiment'] == predicted_label].shape[0]
        other_label_keyword_obs = keyword_obs_df[keyword_obs_df['sentiment'] == other_label].shape[0]
        
        if total_keyword_obs > 0:
            perc = label_keyword_obs / total_keyword_obs
            perc_other = other_label_keyword_obs / total_keyword_obs
        else:
            perc = 0
            perc_other = 0
        
        keywords_perc[keyword] = (perc, perc_other)
    
    return keywords_perc
